---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

x-vars: &vars
  TALOS_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_VERSION' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  TALOS_SCHEMATIC_ID:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_SCHEMATIC_ID' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  KUBERNETES_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.KUBERNETES_VERSION' {{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  CONTROLLER:
    sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1

tasks:

  apply-config:
    desc: Apply Talos configuration to a node
    cmd: |
      sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/talos/assets/{{.hostname}}.secret.sops.yaml | \
          $GOPATH/bin/envsubst | \
              talosctl apply-config --mode={{.mode}} --nodes {{.hostname}} --file /dev/stdin
    env: *vars
    vars:
      mode: '{{.mode | default "no-reboot"}}'
    requires:
      vars: ["hostname"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/talosconfig
      - test -f {{.KUBERNETES_DIR}}/bootstrap/talos/assets/{{.hostname}}.secret.sops.yaml
      - talosctl --nodes {{.hostname}} get machineconfig >/dev/null 2>&1

  upgrade:
    desc: Upgrade Talos on a node
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.hostname}} upgrade --image="factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --wait=true --timeout=10m --preserve=true
      - talosctl --nodes {{.hostname}} health --wait-timeout=10m --server=false
      - until kubectl wait --timeout=5m --for=jsonpath=.status.ceph.health=HEALTH_OK cephcluster --all --all-namespaces; do sleep 10; done
    vars: *vars
    requires:
      vars: ["hostname"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.hostname}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars: *vars
    preconditions:
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.CONTROLLER}} get machineconfig >/dev/null 2>&1

  reset-node:
    desc: Reset a Talos node and shut it down
    prompt: Reset Talos '{{.hostname}}' node on the '{{.cluster}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.hostname}} --graceful=false
    requires:
      vars: ["hostname"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.hostname}} get machineconfig >/dev/null 2>&1

  reset-cluster:
    desc: Reset all the Talos nodes and shut 'em down
    prompt: Reset Talos on the '{{.cluster}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.nodes}} --graceful=false
    vars:
      nodes:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/talosconfig
      - talosctl config info >/dev/null 2>&1
      - talosctl --nodes {{.nodes}} get machineconfig >/dev/null 2>&1
